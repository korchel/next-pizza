generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  fullName String
  phone    String @unique
  email    String @unique
  role         UserRole          @default(USER)
  verified DateTime
  password String

  provider String?
  providerId String?

  orders       Order[]
  cart         Cart?
  verification VerificationCode?

  phoneVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int     @id @default(autoincrement())
  name String @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id       Int     @id @default(autoincrement())
  name     String
  imageUrl String
  active   Boolean @default(false)

  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingredients Ingredient[]
  variants ProductVariant[]
  // pizzas Pizza[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id       Int     @id @default(autoincrement())

  price Int
  size Int?
  pizzaType Int?

  product Product @relation(fields: [productId], references: [id])
  productId Int

  cartItem CartItem[]
}

// model Pizza {
//   id Int @id @default(autoincrement())

//   price    Int
//   size     Int
//   type     Int
//   carbs    Int
//   fats     Int
//   kcal     Int
//   proteins Int
//   weight   Int

//   ingredients Ingredient[]
//   cartItems   CartItem[]

//   productId Int
//   product   Product @relation(fields: [productId], references: [id])

//   active    Boolean  @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  price    Int
  imageUrl String

  // pizzas    Pizza[]
  cartItems CartItem[]
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  token String

  totalAmount Int @default(0)

  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  ingredients Ingredient[]

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  token String

  status      OrderStatus @default(PENDING)
  totalAmount Int
  paymentId   String?
  items Json

  fullName String
  email String
  phone String
  address String
  comment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}